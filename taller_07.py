# -*- coding: utf-8 -*-
"""Taller_07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rFpPc3L56diWvD4qTj8g7w19xeMsDJH0

<h1 align="center">
Taller 07 - Operaciones con Listas
</h1>
"""

# Preparación de los datos para los ejercicios
import pandas as pd

url = 'https://raw.githubusercontent.com/BrayanTorres2/POO_2022_C1/main/municipios.csv'
df = pd.read_csv(url)
municipios = []

for (_, m) in df.iterrows():
    mun = (m[0], m[1], m[2], m[3], m[4], False if m[5] == 0 else True)
    municipios.append(mun)
print('Cantidad de municipios', len(municipios))

"""## La información de los municipios

Tenemos la información de todos los municipios de colombia en una lista de tuplas con la siguiente conformación:

* El primer elemento es el código del municipio, un número
* El segundo elemento es el nombre del municipio
* El tercer elemento es la población urbana del municipio
* El cuarto elemento es la población rural del municipio
* El quinto elemento es el nombre del departamento donde esta el municipio
* El sexto elemento es **True** si el municipio es la capital del departamento y **False** si no se trata de la capital del departamento.

---

## Ejercicio 01

Escriba una función que reciba la lista de municipios como dato de entrada, así como el nombre de un departamento y que retorne cuántos municipios de la lista pertenecen a ese departamento.
"""

def ejercicio01(muns: [(int, str, int, int, str, bool)], nomdepto: str) -> int:
    c = 0
    for i,m,u,r,d,x in muns:
        if d==nomdepto:
            c+=1
    return c

# ----------------------------------------------------------------------------
# Pruebas
assert ejercicio01(municipios, 'Amazonas') == 11
assert ejercicio01(municipios, 'Boyacá') == 123
print('Prueba superada 😎')

"""## Ejercicio 02

Dada una lista con los municipio de Colombia, retorne una lista con los nombres de los municipios que no tienen población urbana.
"""

def ejercicio02(municipios: [(int, str, int, int, str, bool)]) -> [str]:
    resultado = []
    for(codigo,nombre,poburb,pobrur,dept,cap) in municipios:
        if poburb==0:
            resultado.append(nombre)
    return resultado

# Prueba del ejercicio 02
noms = ejercicio02(municipios)
noms.sort()
assert noms == ['Barranco Minas', 'Cacahual', 'El Encanto', 'La Chorrera', 'La Guadalupe', 'La Pedrera', 'La Victoria', 'Mapiripana', 'Mirití-Paraná', 'Morichal Nuevo', 'Pacoa', 'Pana Pana', 'Papunaua', 'Puerto Alegría', 'Puerto Arica', 'Puerto Colombia', 'Puerto Santander', 'San Felipe', 'Tarapacá', 'Yavaraté']
print("Prueba superada 👍")

"""## Ejercicio 03

Escriba una función en Python que reciba la lista con la información de todos los municipios de Colombia, y el nombre de un departamento, y que retorne la suma de la población urbana de todos los municipios de ese departamento, así como la cantidad de municipios que pertenecen a ese departamento también.
"""

def ejercicio03(municipios: [(int, str, int, int, str, bool)], dpto: str) -> (int, int):
    suma = 0
    cont = 0
    for(codigo,nombremun,poburb,pobrur,dept,cap) in municipios:
        if dpto==dept:
            cont=cont+1
            suma=(poburb+suma)
    return (suma, cont)

# Prueba de la función 03
assert ejercicio03(municipios, "La Guajira") == (552_638, 15)
assert ejercicio03(municipios, "Huila") == (703_936, 37)
assert ejercicio03(municipios, "Atlántico") == (2_408_093, 23)
assert ejercicio03(municipios, "Antioquia") == (5_181_668, 125)
print("Prueba superada 👍")

"""## Ejercicio 04

Escriba una función que reciba la lista con la información de todos los municipios del país y el código de un municipio y que retorne el nombre y el departamento del municipio que tiene ese código. Si no existe ese código, deberá retornar el mensaje "no existe".
"""

def ejercicio04(municipios: [(int, str, int, int, str, bool)], codigo: int) -> (str, str):
    for(cod,nombremun,poburb,pobrur,dept,cap) in municipios:
        if cod==codigo:
            a=(nombremun,dept)
        elif codigo>1222:
            a="no existe"
    return (a)

# Prueba de la función ejercicio 04
assert (ejercicio04(municipios, 438)) == ('Caloto', 'Cauca')
assert (ejercicio04(municipios, 7)) == ('Soledad', 'Atlántico')
assert (ejercicio04(municipios, 1024)) == ('Alejandría', 'Antioquia')
assert (ejercicio04(municipios, 819)) == ('Barichara', 'Santander')
assert (ejercicio04(municipios, 1819)) == 'no existe'
print("Prueba superada 👍")

"""## Ejercicio 05

Escriba una función en Python que reciba una lista con la información de todos los municipios de Colombia y que halle el porcentaje de municipios de la lista que son capitales y cuya población urbana supera el millón de habitantes.
"""

import math

def ejercicio05(municipios: [(int, str, int, int, str, bool)]) -> float:
    listamun=[]
    for(cod,nombremun,poburb,pobrur,dept,cap) in municipios:
        if cap==True:
            if poburb>1_000_000:
                listamun.append(poburb)
    a=((len(listamun))*100/len(municipios))
    return(a)            

# Prueba de la función del ejercicio 5
assert math.isclose(ejercicio05(municipios), 0.3565, rel_tol=1e-4)
print("Prueba superada 👍")

"""## Ejercicio 06

Escriba una función que reciba la lista con la información de todos los municipios de Colombia y el nombre de un departamento, y que retorne el nombre del municipio de ese departamento que tiene la población urbana más pequeña.
"""

def ejercicio06(municipios: [(int, str, int, int, str, bool)], dpto: str) -> str:
    max=2**32
    nombre=""
    for(cod,nombremun,poburb,pobrur,dept,cap) in municipios:
        if dpto==dept:
            if(max>poburb):
                max=poburb
                nombre=nombremun
    return(nombre)  

# Prueba de la función del ejercicio 06
assert (ejercicio06(municipios, 'Santander'))  == 'Jordán'
assert (ejercicio06(municipios, 'Boyacá')) == 'Chíquiza'
assert (ejercicio06(municipios, 'Magdalena')) == 'San Zenón'
assert (ejercicio06(municipios, 'Cundinamarca')) == 'Fúquene'
print("Prueba superada 👍")

"""## Ejercicio 07

Escriba una función en Python que reciba una lista con la información de todos los municipios de Colombia y dos códigos, y que retorne la suma de la población rural de aquellos municipios cuyo código sea mayor o igual que el primer código y menor o igual que el segundo código.
"""

def ejercicio07(municipios: [(int, str, int, int, str, bool)], cod1: int, cod2: int) -> int:
    suma = 0
    for(cod,nombremun,poburb,pobrur,dept,cap) in municipios:
        if cod>=cod1 and cod<=cod2:
            suma=pobrur+suma
    return suma

# Prueba de la función del ejercicio 07
assert (ejercicio07(municipios, 850, 960)) == 416_362
assert (ejercicio07(municipios, 1, 10)) == 193_550
assert (ejercicio07(municipios, 300, 400)) == 1_217_094
print("Prueba superada 👍")